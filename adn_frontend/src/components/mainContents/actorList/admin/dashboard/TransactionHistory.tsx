/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useEffect, useState } from 'react';
import { Table, Spinner, Alert, Button } from 'react-bootstrap';
import dayjs from 'dayjs';

const TransactionHistory = () => {
  const [transactions, setTransactions] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [summary, setSummary] = useState<any>(null);
  const [bankCodeInput, setBankCodeInput] = useState<string>(''); // üëà user input
  const [bankCodeFilter, setBankCodeFilter] = useState<string>(''); // üëà actual filter
  const translate = (status: string): string => {
    switch (status.toLowerCase()) {
      case 'deposit':
        return 'N·∫°p ti·ªÅn';
      case 'payment':
        return 'Thanh to√°n';
      case 'refund':
        return 'Ho√†n ti·ªÅn';
      default:
        return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const fetchTransactions = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await fetch(
        'http://localhost:8080/api/dashboard/transaction-history',
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        }
      );
      const data = await response.json();

      if (Array.isArray(data)) {
        setTransactions(data);
      } else if (Array.isArray(data.transactions)) {
        setTransactions(data.transactions);
        setSummary({
          totalIncome: data.totalIncome,
          totalExpense: data.totalExpense,
          netAmount: data.netAmount,
          description: data.description,
        });
      } else {
        setError('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ server');
        console.error('Invalid data format:', data);
      }
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTransactions();
  }, []);

  const formatCurrency = (value: number) =>
    value.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });

  const filteredTransactions =
    bankCodeFilter.trim() === ''
      ? transactions
      : transactions.filter((tx) =>
          tx.userPhone?.toLowerCase().includes(bankCodeFilter.toLowerCase())
        );

  return (
    <div className="container mt-4">
      <h3 className="mb-3">L·ªãch s·ª≠ giao d·ªãch</h3>

      {loading && (
        <div className="text-center my-4">
          <Spinner animation="border" variant="primary" />
        </div>
      )}

      {error && <Alert variant="danger">{error}</Alert>}

      {!loading && !error && transactions.length === 0 && (
        <Alert variant="info">Kh√¥ng c√≥ giao d·ªãch n√†o.</Alert>
      )}

      {/* Form t√¨m ki·∫øm */}
      <div className="mb-3">
        <label htmlFor="bankCodeInput" className="form-label">
          T√¨m theo s·ªë ƒëi·ªán tho·∫°i
        </label>
        <div className="input-group">
          <input
            type="text"
            id="bankCodeInput"
            className="form-control"
            value={bankCodeInput}
            onChange={(e) => setBankCodeInput(e.target.value)}
          />
          <Button
            variant="primary"
            onClick={() => setBankCodeFilter(bankCodeInput)}
          >
            T√¨m
          </Button>
        </div>
      </div>

      {!loading && filteredTransactions.length > 0 && (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>S·ªë ƒëi·ªán tho·∫°i</th>
              <th>T√™n ng∆∞·ªùi d√πng</th>
              <th>Lo·∫°i giao d·ªãch</th>
              <th>S·ªë ti·ªÅn</th>
              <th>S·ªë d∆∞ sau</th>
              <th>Lo·∫°i d·ªãch v·ª•</th>
              <th>Th·ªùi gian</th>
            </tr>
          </thead>
          <tbody>
            {filteredTransactions.map((tx) => (
              <tr key={tx.transactionId}>
                <td>{tx.userPhone || 'N/A'}</td>
                <td>{tx.userName}</td>
                <td>{translate(tx.category)}</td>
                <td
                  className={
                    tx.transactionType === 'INCOME'
                      ? 'text-success'
                      : 'text-danger'
                  }
                >
                  {formatCurrency(tx.amount)}
                </td>
                <td>
                  {tx.walletBalanceAfter
                    ? formatCurrency(tx.walletBalanceAfter)
                    : 'N/A'}
                </td>
                <td>{tx.serviceName}</td>
                <td>{dayjs(tx.appointmentDate).format('DD/MM/YYYY')}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}

      {!loading && !error && filteredTransactions.length === 0 && (
        <Alert variant="warning">Kh√¥ng t√¨m th·∫•y giao d·ªãch ph√π h·ª£p.</Alert>
      )}

      {summary && (
        <div className="mt-4">
          <h5>T·ªïng k·∫øt giao d·ªãch</h5>
          <Table bordered>
            <tbody>
              <tr>
                <td>
                  <strong>Ng∆∞·ªùi d√πng chi</strong>
                </td>
                <td className="text-success">
                  {formatCurrency(summary.totalIncome)}
                </td>
              </tr>
              <tr>
                <td>
                  <strong>Ho√†n ti·ªÅn d·ªãch v·ª•</strong>
                </td>
                <td className="text-danger">
                  {formatCurrency(summary.totalExpense)}
                </td>
              </tr>
              <tr>
                <td>
                  <strong>L·ª£i nhu·∫≠n</strong>
                </td>
                <td>
                  <strong>{formatCurrency(summary.netAmount)}</strong>
                </td>
              </tr>
            </tbody>
          </Table>
        </div>
      )}
    </div>
  );
};

export default TransactionHistory;
